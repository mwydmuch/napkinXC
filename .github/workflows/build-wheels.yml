name: Build Python wheels and make PyPI release

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build-wheels.yml'
      - 'python/**'
      - 'src/**'
      - 'CMakeLists.txt'
      - 'setup.py'
      - 'pyproject.toml'
    branches: [master]
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-11, windows-2019]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.15.0
        env:
          # Configure cibuildwheel to build native archs, and some emulated ones
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_ARCHS_MACOS: x86_64
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_BUILD_VERBOSITY: 3
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel show {wheel} && auditwheel repair -w {dest_dir} {wheel}

      - name: Report built wheels
        run: |
          ls -l ./wheelhouse/*.whl

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build sdist
        run: pipx run build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  # test_wheels:
  #   name: Test wheels
  #   needs: [build_wheels]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-22.04, macos-11, windows-2019]
  #       python-version: [ '3.8', '3.9', '3.10', '3.11', '3.12' ]

  #   steps:
  #     - name: Download wheels
  #       uses: actions/download-artifact@v3
  #       with:
  #         # Unpacks default artifact into dist/
  #         # If `name: artifact` is omitted, the action will create extra parent dir
  #         name: artifact
  #         path: dist
      
  #     - name: Set up Python ${{ matrix.python-version }} environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Python environment report
  #       run: python -c "import sys; print(sys.version)"

  #     - name: Upgrade pip and install pytest
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pytest scikit-learn==1.2.2

  #     - name: Pip install
  #       run: pip install dist/*.whl
  
  #     - name: Run tests
  #       shell: bash
  #       run: pytest python/tests/test_*

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download all dists
        uses: actions/download-artifact@v3
        with:
          # Unpacks default artifact into dist/
          # If `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}